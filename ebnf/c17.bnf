# C BNF for ISO/IEC C17
<translation-unit> ::= {<external-declaration>}*

<external-declaration> ::= <function-definition>
                         | <declaration>

<function-definition> ::= {<declaration-specifier>}* <declarator> {<declaration>}* <compound-statement>


<declaration-specifier> ::= <storage-class-specifier>
                          | <type-specifier>
                          | <type-qualifier>
                          | <function-specifier>
                          | <alignment-specifier>

<storage-class-specifier> ::= auto
                            | register
                            | static
                            | extern
                            | typedef
                            | _Thread_local

<type-specifier> ::= void
                   | char
                   | short
                   | int
                   | long
                   | float
                   | double
                   | signed
                   | unsigned
                   | _Bool
                   | _Complex
                   | <atomic-type-specifier>
                   | <struct-or-union-specifier>
                   | <enum-specifier>
                   | <typedef-name>

<function-specifier> ::= inline
                       | _Noreturn

<alignment-specifier> ::= _Alignas "(" <type-name> ")"
                        | _Alignas "(" <constant-expression> ")"

<atomic-type-specifier> ::= _Atomic "(" <type-name> ")"

<struct-or-union-specifier> ::= <struct-or-union> <identifier> ("{" {<struct-declaration>}* "}")?
                              | <struct-or-union> "{" {<struct-declaration>}* "}"

<struct-or-union> ::= struct
                    | union

<struct-declaration> ::= <specifier-qualifier-list>* <struct-declarator-list>? ";"
                       | <static_assert-declaration>

<specifier-qualifier> ::= <type-specifier> <specifier-qualifier>?
                        | <type-qualifier> <specifier-qualifier>?

<struct-declarator-list> ::= <struct-declarator> ("," <struct-declarator>)*

<struct-declarator> ::= <declarator> (":" <constant-expression>)?
                      | ":" <constant-expression>

<declarator> ::= {<pointer>}? <direct-declarator>

<pointer> ::= ("*" <type-qualifier>*)*

<type-qualifier> ::= const
                   | volatile
                   | restrict
                   | _Atomic

<direct-declarator> ::= <identifier>
                      | "(" <declarator> ")"
                      | <direct-declarator> "[" <type-qualifier-list>? <assignment-expression>? "]"
                      | <direct-declarator> "[" static <type-qualifier-list>? <assignment-expression> "]"
                      | <direct-declarator> "[" <type-qualifier-list> static <assignment-expression> "]"
                      | <direct-declarator> "[" <type-qualifier-list>? "*" "]"
                      | <direct-declarator> "(" <parameter-list> ")"
                      | <direct-declarator> "(" (<identifier-list>)? ")"

<type-qualifier-list> ::= <type-qualifier>+

<parameter-list> ::= <parameter-declaration> ("," <parameter-declaration>)* ("," "...")?

<identifier-list> ::= <identifier> ("," <identifier>)*

<constant-expression> ::= <conditional-expression>

<conditional-expression> ::= <logical-or-expression> ("?" <expression> ":" <conditional-expression>)?

<logical-or-expression> ::= <logical-and-expression> ("||" <logical-and-expression>)*

<logical-and-expression> ::= <inclusive-or-expression> ("&&" <inclusive-or-expression>)*

<inclusive-or-expression> ::= <exclusive-or-expression> ("|" <exclusive-or-expression>)*

<exclusive-or-expression> ::= <and-expression> ("^" <and-expression>)*

<and-expression> ::= <equality-expression> ("&" <equality-expression>)*

<equality-expression> ::= <relational-expression> (("=="|"!=") <relational-expression>)*

<relational-expression> ::= <shift-expression> (("<"|">"|"<="|">=") <shift-expression>)*

<shift-expression> ::= <additive-expression> (("<<" | ">>") <additive-expression>)*

<additive-expression> ::= <multiplicative-expression> (("+"|"-") <multiplicative-expression>)*

<multiplicative-expression> ::= <cast-expression> (("*"|"/"|"%") <cast-expression>)*

<cast-expression> ::= <unary-expression>
                    | "(" <type-name> ")" <cast-expression>


<unary-expression> ::= <postfix-expression>
                     | "++" <unary-expression>
                     | "--" <unary-expression>
                     | <unary-operator> <cast-expression>
                     | sizeof <unary-expression>
                     | sizeof   "(" <type-name> ")"
                     | _Alignof "(" <type-name> ")"

<postfix-expression> ::= <primary-expression>
                       | <postfix-expression> "[" <expression> "]"
                       | <postfix-expression> "(" <argument-expression-list>? ")"
                       | <postfix-expression> "." <identifier>
                       | <postfix-expression> "->" <identifier>
                       | <postfix-expression> "++"
                       | <postfix-expression> "--"
                       | "(" <type-name> ")" "{" <initializer-list> (",")? "}"

<static_assert-declaration> ::= _Static_assert "(" <constant-expression> "," <string> ")"

<primary-expression> ::= <identifier>
                       | <constant>
                       | <string>
                       | "(" <expression> ")"
                       | <generic-selection>

<generic-selection> ::= _Generic "(" <assignment-expression> "," <generic-assoc-list> ")"

<generic-assoc-list> ::= <generic-association> ("," <generic-association>)*

<generic-association> ::= <type-name> ":" <assignment-expression>
                        | default ":" <assignment-expression>

<constant> ::= <integer-constant>
             | <character-constant>
             | <floating-constant>
             | <enumeration-constant>
             | <predefined-constant>

<expression> ::= <assignment-expression> ("," <assignment-expression>)*

<argument-expression-list> ::= <assignment-expression> ("," <assignment-expression>)*

<assignment-expression> ::= <conditional-expression>
                          | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= "="
                        | "*="
                        | "/="
                        | "%="
                        | "+="
                        | "-="
                        | "<<="
                        | ">>="
                        | "&="
                        | "^="
                        | "|="

<unary-operator> ::= "&"
                   | "*"
                   | "+"
                   | "-"
                   | "~"
                   | "!"

<type-name> ::= {<specifier-qualifier>}+ {<abstract-declarator>}?

<parameter-declaration> ::= {<declaration-specifier>}+ <declarator>
                          | {<declaration-specifier>}+ (<abstract-declarator>)?

<abstract-declarator> ::= <pointer>
                        | <pointer> <direct-abstract-declarator>
                        | <direct-abstract-declarator>

<direct-abstract-declarator> ::=  
        | "(" <abstract-declarator> ")"
        | <direct-abstract-declarator>? "(" <parameter-type-list>? ")"
        | <direct-abstract-declarator>? "[" <type-qualifier-list>? <assignment-expression>? "]"
        | <direct-abstract-declarator>? "[" static <type-qualifier-list>? <assignment-expression> "]"
        | <direct-abstract-declarator>? "[" <type-qualifier-list> static <assignment-expression> ]
        | <direct-abstract-declarator>? "[" "*" "]"

<enum-specifier> ::= enum (<identifier>)? "{" <enumerator> ("," <enumerator>)* ","? "}"
                   | enum <identifier>

<enumerator> ::= <enumeration-constant> ("=" <constant-expression>)?

<typedef-name> ::= <identifier>

<declaration> ::= <declaration-specifier>+ (<init-declarator-list>)? ";"
                | <static-assert-declaration>

<init-declarator-list> ::= <init-declarator> ("," <init-declarator>)*

<init-declarator> ::= <declarator> ("=" <initializer>)?

<initializer> ::= <assignment-expression>
                | "{" <initializer-list> "}"
                | "{" <initializer-list> "," "}"

<initializer-list> ::= <designation>? <initializer> ("," <designation>? <initializer>)*

<designation> ::= <designator>+ "="

<designator> ::= "[" <constant-expression> "]"
               | "." <identifier>

<compound-statement> ::= "{" (<block-item>)* "}"

<block-item> ::= <declaration>
               | <statement>

<statement> ::= <labeled-statement>
              | <expression-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>
              | <jump-statement>

<labeled-statement> ::= <identifier> ":" <statement>
                      | case <constant-expression> ":" <statement>
                      | default ":" <statement>

<expression-statement> ::= {<expression>}? ";"

<selection-statement> ::= if "(" <expression> ")" <statement>
                        | if "(" <expression> ")" <statement> else <statement>
                        | switch "(" <expression> ")" <statement>

<iteration-statement> ::= while "(" <expression> ")" <statement>
                        | do <statement> while "(" <expression> ")" ";"
                        | for "(" {<expression>}? ";" {<expression>}? ";" {<expression>}? ")" <statement>
                        | for "(" <declaration> <expression>? ";" <expression>? ")" <statement>

<jump-statement> ::= goto <identifier> ";"
                   | continue ";"
                   | break ";"
                   | return {<expression>}? ";"